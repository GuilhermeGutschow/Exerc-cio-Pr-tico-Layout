import java.awt.*;
import java.awt.event.*;
import javax.swing.*;

public class ColorSelect extends JFrame{
	private JButton colorJButton, okJButton, cancelJButton;
	private JButton plusJButton, minusJButton, eraseDrawingJButton;
	private Color currentColor, initialColor = Color.LIGHT_GRAY;
	
	private JPanel colorJPanel, jPanel1, jPanel2;
	private Point [] colorPoints = new Point [10000];
	private int pointCount = 0;
	private int colorPointSize = 4, maximumColorPointSize = 10, minimumColorPointSize = 2;
	
	public ColorSelect() {
		super("Usando JColorChooser");
		
		currentColor = initialColor;
		
		colorJPanel = new JPanel();
		colorJPanel.setBackground(Color.WHITE);
	
		colorJButton = new JButton("Cor");
		colorJButton.addActionListener(
			new ActionListener() { 
				@Override
				public void actionPerformed(ActionEvent arg0) {
					currentColor = JColorChooser.showDialog(ColorSelect.this, "Escolhe uma cor", currentColor); 
				
					if (currentColor == null)
						currentColor = Color.LIGHT_GRAY;
				
				}
			}
		);
		
		okJButton = new JButton ("Ok");
		okJButton.addActionListener(
				new ActionListener () {
					@Override
					public void actionPerformed (ActionEvent e){
						
						jPanel1.setBackground(currentColor);
						jPanel2.setBackground(currentColor);
					}
				}
			);
		
		cancelJButton = new JButton ("Cancel");
		cancelJButton.addActionListener(
				new ActionListener () {
					@Override
					public void actionPerformed(ActionEvent e){
						currentColor = initialColor;
						jPanel1.setBackground(initialColor);
						jPanel2.setBackground(initialColor);
					}
				}
			);
		
		plusJButton = new JButton ("+");
		plusJButton.addActionListener(
				new ActionListener () {
					@Override
					public void actionPerformed (ActionEvent e) {
						if (colorPointSize < maximumColorPointSize) {
							colorPointSize ++;
						}
					}
				}
			);
		
		minusJButton = new JButton ("-");
		minusJButton.addActionListener(
				new ActionListener () {
					@Override
					public void actionPerformed (ActionEvent e) {
						if (colorPointSize > minimumColorPointSize) {
							colorPointSize --;
						}
					}
				}
			);
		
		eraseDrawingJButton = new JButton ("Erase Drawing");
		eraseDrawingJButton.addActionListener(
				new ActionListener () {
					@Override
					public void actionPerformed (ActionEvent e) {
						colorJPanel.setBackground(Color.BLACK);
						colorJPanel.setBackground(Color.WHITE);
						colorPoints = new Point [1000];
						pointCount = 0;
					}
				}
			);
		
		addMouseMotionListener(
				new MouseMotionAdapter() {
					public void mouseDragged(MouseEvent event) { 

						if (pointCount < colorPoints.length && isPointInsidePaintComponent (event.getPoint())) {
							colorPoints[pointCount] = event.getPoint(); 
							pointCount++; 
							PaintComponent (getGraphics());
						}
					}
				}
			);
		
		jPanel1 = new JPanel();
		
		jPanel1.setLayout(new GridLayout (3, 1, 10, 10));
		
		jPanel1.add(colorJButton);
		jPanel1.add(okJButton);
		jPanel1.add(cancelJButton);
		
		jPanel2 = new JPanel();
		
		jPanel2.setLayout(new GridLayout (1, 3, 10, 10));
		
		jPanel2.add(plusJButton);
		jPanel2.add(minusJButton);
		jPanel2.add(eraseDrawingJButton);
		
		
		add(colorJPanel, BorderLayout.CENTER); //adiciona colorJPanel
		add (jPanel1, BorderLayout.WEST);
		add (jPanel2, BorderLayout.NORTH);
		
		setSize(400, 300); // configura tamanho do frame
		setVisible(true); //exibe o frame
	}
	
	private boolean isPointInsidePaintComponent (Point p) {
		return (p.x - colorPointSize/4 >= colorJPanel.getLocationOnScreen().x && p.y - colorPointSize/4 >= colorJPanel.getLocationOnScreen().y);
	}
	
	private void PaintComponent (Graphics g) {		
		colorJPanel.paintComponents(g);
		g.setColor(currentColor);
		g.fillOval(colorPoints[pointCount-1].x, colorPoints[pointCount-1].y, colorPointSize, colorPointSize);
		
	}
	
	public static void main(String[] args) {
		ColorSelect application = new ColorSelect();
		application.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
	}
}
